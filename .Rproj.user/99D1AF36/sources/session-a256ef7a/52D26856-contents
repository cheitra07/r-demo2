library(shiny)
library(DT)
library(ggplot2)
library(shinyjs)
library(shinyFeedback)
library(shinydashboard)
library(grid)
library(shinyalert)
library(png)

# Sample data for the table
sample_data <- data.frame(
  Product = c("A", "B", "C", "D", "DD", "FF", "H"),
  Price = c(100, 150, 200, 300, 400, 500, 700),
  Quantity = c(10, 20, 15, 45, 78, 98, 89),
  stringsAsFactors = FALSE
)

# UI definition using shinydashboard
ui <- dashboardPage(
  dashboardHeader(title = "Sales Price Escalation Project"),
  dashboardSidebar(
    sidebarMenu(
      menuItem("README", tabName = "readme"),
      menuItem("Sales Escalation Report", tabName = "report"),
      menuItem("General Tasks", tabName = "tasks"),
      menuItem("Reactive Graph", tabName = "graph")
    )
  ),
  dashboardBody(
    useShinyjs(),  # Enable JavaScript in UI
    useShinyFeedback(),  # Enable feedback
    tags$head(
      tags$script(HTML("
        Shiny.addCustomMessageHandler('reportDownloaded', function(message) {
          alert('The report has been downloaded successfully!');
        });
      "))
    ),
    tabItems(
      # README Tab
      tabItem(
        tabName = "readme",
        h2("README"),
        p("This project demonstrates a system to handle sales price escalation."),
        p("When invoices are raised, prices are recorded as initial values (X). Over time, market factors may cause these prices to change, and the updated prices are escalated to the customer during delivery."),
        h3("Features Demonstrated"),
        tags$ul(
          tags$li("Modularized Code Structure: Clean and reusable code components."),
          tags$li("Interactive JavaScript and jQuery Integration: Enhancing user interactivity."),
          tags$li("Caching Mechanisms: Optimized data handling for better performance."),
          tags$li("File Upload and Download: Simplified file management within the app."),
          tags$li("Reactive Graphs: Use of reactive graph to improve performance just a plot is added for demo.")
        )
      ),
      # Sales Escalation Report Tab
      tabItem(
        tabName = "report",
        h4("Sales Price Escalation Report"),
        actionButton(
          inputId = "downloadReport",
          label = "Download Report",
          class = "btn btn-primary"
        )
      ),
      # General Tasks Tab
      tabItem(
        tabName = "tasks",
        h4("Data Table with Sales Data"),
        DTOutput("dataTable"),
        actionButton("saveData", "Save Data", class = "btn btn-success")
      ),
      # Reactive Graph Tab
      tabItem(
        tabName = "graph",
        h4("Upload and Render Graph"),
        fileInput("fileUpload", "Upload a Graph", accept = c("image/png", "image/jpeg")),
        plotOutput("uploadedPlot"),
        downloadButton("downloadCache", "Download Uploaded Plot")
      )
    )
  )
)

# Server function
server <- function(input, output, session) {
  # Reactive sales data
  sales_data <- reactiveVal(sample_data)
  
  # Render data table
  output$dataTable <- renderDT({
    datatable(
      sales_data(), 
      editable = TRUE, 
      options = list(pageLength = 3)
    )
  })
  
  # Handle data table edits
  observeEvent(input$dataTable_cell_edit, {
    info <- input$dataTable_cell_edit
    new_data <- sales_data()
    new_data[info$row, info$col] <- info$value
    sales_data(new_data)
  })
  
  # Save data to a CSV file
  observeEvent(input$saveData, {
    write.csv(sales_data(), "updated_sales_data.csv", row.names = FALSE)
    showFeedbackSuccess(inputId = "saveData", text = "Data saved successfully!")
  })
  
  # Download sales report and trigger JS alert
  observeEvent(input$downloadReport, {
    output$reportFile <- downloadHandler(
      filename = function() {
        paste("sales_report_", Sys.Date(), ".csv", sep = "")
      },
      content = function(file) {
        write.csv(sales_data(), file, row.names = FALSE)
      }
    )
    # Send a message to the JavaScript handler
    session$sendCustomMessage(type = "reportDownloaded", message = NULL)
  })
}

# Run the application
shinyApp(ui = ui, server = server)
